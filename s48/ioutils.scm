(define (read-line port)
  (let loop ((acc '()))
    (let ((ch (read-char port)))
      (if (eof-object? ch)
          (if (null? acc)
	      ch
	      (list->string (reverse acc)))
          (if (char=? ch #\newline)
              (list->string (reverse acc))
              (loop (cons ch acc)))))))

(define (port->lines port . maybe-and-close?)
  (let loop ((acc '()))
    (let ((line (read-line port)))
      (if (eof-object? line)
	  (begin (if (and (pair? maybe-and-close?)
			  (car maybe-and-close?))
		     (close-input-port port))
		 (reverse acc))
	  (loop (cons line acc))))))

(define (port->string port . maybe-and-close?)
  (let loop ((acc '()))
    (let ((ch (read-char port)))
      (if (eof-object? ch)
	  (begin (if (and (pair? maybe-and-close?)
			  (car maybe-and-close?))
		     (close-input-port port))
		 (list->string (reverse acc)))
	  (loop (cons ch acc))))))

(define (display-lines lines . maybe-port)
  (let ((port (if (null? maybe-port) (current-output-port) (car maybe-port))))
    (let loop ((lines lines))
      (if (null? lines)
	  'done
	  (begin (display (car lines) port)
		 (newline port)
		 (loop (cdr lines)))))))

(define eof (eof-object))

(define (flush-output port)
  'nop)
